#!/bin/bash

CONFIG_FILE="$HOME/.tmux_manager_config"
PROJECTS_FILE="$HOME/Management/projects.txt"
REPO_URL="https://github.com/Angeli-Code/tmux-manager"

load_config() {
  if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
  else
    DISPLAY_HELP=true
  fi
}

save_config() {
  echo "DISPLAY_HELP=$DISPLAY_HELP" >"$CONFIG_FILE"
}

display_menu() {
  clear
  if [ "$DISPLAY_HELP" = true ]; then
    echo "Type 't' to toggle command help."
    echo
  fi
  echo "Available Tmux Sessions:"
  sessions=$(tmux list-sessions -F "#{session_name}" 2>/dev/null)
  if [ -z "$sessions" ]; then
    echo "No active sessions..."
  else
    echo "$sessions" | nl -s ': ' -w 1
  fi
  if [ "$DISPLAY_HELP" = true ]; then
    echo
    echo "Command List"
    echo "------------"
    echo "'c' = create session (select directory from root)"
    echo "'p' = create session from git repositories (projects in home dir)"
    echo "'a' = attach to existing session"
    echo "'d' = detach from current session"
    echo "'k' = kill existing session(s)"
    echo "'r' = open repository"
    echo "'q' = quit program"
    echo "'t' = toggle commands display"
    echo "'h' = display detailed help"
  fi
}

update_projects_list() {
  mkdir -p "$(dirname "$PROJECTS_FILE")"
  find "$HOME" -type d -name ".git" 2>/dev/null | while read -r gitdir; do
  repo_dir=$(dirname "$gitdir")
  if [[ "$repo_dir" != */.* ]]; then
    echo "$repo_dir"
  fi
done | awk '{
paths[$0] = 1
for (i=1; i<NF; i++) {
  prefix = ""
  for (j=1; j<=i; j++) prefix = prefix $j "/"
    if (prefix in paths) delete paths[prefix]
    }
  } END {
  for (path in paths) print path
  }' FS="/" > "$PROJECTS_FILE"
}

general_selection() {
  local selected_dir=$(find / -path /proc -prune -o -path /sys -prune -o -type d 2>/dev/null | fzf --prompt="Select a directory: ")
  echo "$selected_dir"
}

projects_selection() {
  update_projects_list
  local selected_project=$(cat "$PROJECTS_FILE" | fzf --prompt="Select a project: ")
  echo "$selected_project"
}

display_help() {
  clear
  echo "==================="
  echo " Tmux Manager Help"
  echo "==================="
  echo
  echo "-------------------"
  echo "Available Commands:"
  echo "-------------------"
  echo "'c' = Create a new Tmux session from a general directory selection (root directory)."
  echo "'p' = Create a new Tmux session from a list of git repositories (within your home directory)."
  echo "'a' = Attach to an existing Tmux session."
  echo "'d' = Detach from the current Tmux session."
  echo "'k' = Kill an existing Tmux session."
  echo "'r' = Open the Tmux Manager repository URL."
  echo "'q' = Quit the program."
  echo "'t' = Toggle the command help display."
  echo "'h' = Display this help documentation."
  echo
  echo "-------------------"
  echo "Usage Instructions:"
  echo "-------------------"
  echo "1. Use 'c' to start a new session from any directory. This allows you to navigate your entire filesystem."
  echo "2. Use 'p' to start a new session from your git repositories. This focuses on projects within your home directory."
  echo "3. Use 'a' to attach to an existing session. Select the session number to attach."
  echo "4. Use 'd' to detach from the current session."
  echo "5. Use 'k' to kill a specific or all sessions. Select the session number or 'a' for all."
  echo "6. Use 'r' to open the Tmux Manager repository in your default web browser."
  echo "7. Use 'q' to quit the program."
  echo "8. Use 't' to toggle the display of command help."
  echo "9. Use 'h' to display this detailed help information."
  echo
  echo "For more detailed information, including the source code and README, type 'r' in the main menu to open the repository URL."
  read -p "Press return to return to the menu..."
}

load_config

while true; do
  display_menu
  stty -echo
  read -n1 option
  stty echo
  echo

  case $option in
    c)
      clear
      selected_dir=$(general_selection)
      if [ -n "$selected_dir" ]; then
        read -p "Session Name: " new_session_name
        tmux new-session -s "$new_session_name" -c "$selected_dir"
        exit 0
      else
        echo "No directory selected."
      fi
      ;;
    a)
      if [ -n "$sessions" ]; then
        stty -echo
        read -n1 session_number
        stty echo
        echo
        session_name=$(echo "$sessions" | sed -n "${session_number}p")
        if [ -n "$session_name" ]; then
          if [ -n "$TMUX" ]; then
            tmux switch-client -t "$session_name"
            clear
            exit 0
          else
            tmux attach-session -t "$session_name" 2>/dev/null
            clear
            exit 0
          fi
        fi
      fi
      ;;
    d)
      tmux detach
      exit 0
      ;;
    k)
      if [ -n "$sessions" ]; then
        stty -echo
        read -n1 session_number
        stty echo
        echo
        if [ "$session_number" = "a" ]; then
          tmux kill-server
        else
          session_name=$(echo "$sessions" | sed -n "${session_number}p")
          if [ -n "$session_name" ]; then
            tmux kill-session -t "$session_name" 2>/dev/null
          fi
        fi
      fi
      ;;
    q)
      clear
      exit 0
      ;;
    t)
      DISPLAY_HELP=$([ "$DISPLAY_HELP" = true ] && echo false || echo true)
      save_config
      ;;
    r)
      xdg-open "$REPO_URL" 2>/dev/null || open "$REPO_URL" 2>/dev/null &
      ;;
    p)
      selected_project=$(projects_selection)
      if [ -n "$selected_project" ]; then
        session_name=$(basename "$selected_project")
        tmux new-session -s "$session_name" -c "$selected_project"
        echo "Changed directory to $selected_project"
      else
        echo "No project selected."
      fi
      ;;
    h)
      display_help
      ;;
    *)
      ;;
  esac
done

