#!/bin/bash

parse_arguments() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: darkcompiler <mainfilename.extension> [--javafx]"
    exit 1
  fi
  FILENAME="$1"
  JAVAFX_FLAG=false
  if [[ "$*" == *"--javafx"* ]]; then
    JAVAFX_FLAG=true
  fi
}

get_file_extension() {
  FILE_EXTENSION="${FILENAME##*.}"
}

determine_project_type() {
  case "$FILE_EXTENSION" in
    java)
      if [ "$JAVAFX_FLAG" = true ]; then
        PROJECT_TYPE="javafx"
      else
        PROJECT_TYPE="java"
      fi
      ;;
    cpp)
      PROJECT_TYPE="cpp"
      ;;
    c)
      PROJECT_TYPE="c"
      ;;
    asm)
      PROJECT_TYPE="assembly"
      ;;
    *)
      echo "Unsupported file extension: $FILE_EXTENSION"
      exit 1
      ;;
  esac
}

create_temp_dir() {
  ORIGINAL_DIR=$(pwd)
  TEMP_DIR="$ORIGINAL_DIR/TEMP_DIR"
  if [ -d "$TEMP_DIR" ]; then
    rm -rf "$TEMP_DIR"
  fi
  mkdir "$TEMP_DIR"
}

copy_files() {
  cp "$FILENAME" "$TEMP_DIR"
  for file in *."$FILE_EXTENSION"; do
    cp "$file" "$TEMP_DIR"
  done
}

get_compiler_and_commands() {
  case "$PROJECT_TYPE" in
    java | javafx)
      COMPILER="javac"
      RUN_COMMAND="java"
      ;;
    cpp | c)
      COMPILER="g++"
      RUN_COMMAND="./a.out"
      ;;
    assembly)
      COMPILER="nasm"
      RUN_COMMAND="./a.out"
      ;;
  esac
}

compile_code() {
  cd "$TEMP_DIR" || exit
  "$COMPILER" *."$FILE_EXTENSION" -o a.out
  if [ "$?" -ne 0 ]; then
    return 1
  fi
  return 0
}

handle_compilation_error() {
  ERROR_LOG="$ORIGINAL_DIR/error.txt"
  echo "Compilation failed with errors."
  "$COMPILER" "$FILENAME" 2>"$ERROR_LOG"
  echo "Error log saved to $ERROR_LOG"
  cleanup_temp_dir
}

handle_successful_compilation() {
  echo "Compilation successful."
  "$RUN_COMMAND"
  cleanup_temp_dir
}

cleanup_temp_dir() {
  rm -rf "$TEMP_DIR"
}

main() {
  parse_arguments "$@"
  get_file_extension
  determine_project_type
  create_temp_dir
  copy_files
  get_compiler_and_commands
  if ! compile_code; then
    handle_compilation_error
  else
    handle_successful_compilation
  fi
}

main "$@"

